version: 2.1

preset-filter-test: &WORKFLOW_TEST_FILTER
  only:
    - develop
    - /^feature.*/
    - /^hotfix.*/
    - /^release.*/

preset-filter-deploy: &WORKFLOW_TEST_DEPLOY_FILTER
  only:
    - master

preset-filter-check: &WORKFLOW_CHECK_DEPLOY_READY_FILTER
  only:
    - /^hotfix.*/
    - /^release.*/

commands:
  checkout-and-setup:
    parameters:
      setup-variables:
        type: boolean
        default: false
    steps:
      - checkout
      - run:
          name: Enable permissions on scripts
          command: chmod +x $SCRIPTS/**.sh -v
      - when:
          condition: <<parameters.setup-variables>>
          steps:
            - run:
                name: Setup Variables
                command: $SCRIPTS/build_setup_variables.sh
      - run:
          name: Store Unity version to file
          command: echo "$UNITY_VERSION" | tee /unity-version.txt

executors:
  unity-2018-4-14f1: &unity-2018-4-14f1-executor
    docker:
      - image: applejag/newtonsoft.json-for-unity.package-unity-tester:v1-2018.4.14f1
    environment:
      UNITY_LICENSE_CONTENT_B64_ENV: UNITY_2018_4_14f1_LICENSE_CONTENT_B64
      UNITY_VERSION: 2018.4.14f1

  unity-2019-2-11f1:
    docker:
      - image: applejag/newtonsoft.json-for-unity.package-unity-tester:v1-2019.2.11f1
    environment:
      UNITY_LICENSE_CONTENT_B64_ENV: UNITY_2019_2_11f1_LICENSE_CONTENT_B64
      UNITY_VERSION: 2019.2.11f1

  unity-2020-1-0b6:
    docker:
      - image: applejag/newtonsoft.json-for-unity.package-unity-tester:v1-2020.1.0b6-linux-il2cpp
    environment:
      UNITY_LICENSE_CONTENT_B64_ENV: UNITY_2020_1_0b6_LICENSE_CONTENT_B64
      UNITY_VERSION: 2020.1.0b6

jobs:
  test:
    parameters:
      unity-version:
        type: executor
      json-net-4-unity-version:
        type: string
        default: 13.0.102

    executor: <<parameters.unity-version>>
    working_directory: ~/repo

    environment:
      SCRIPTS: /root/repo/Build/Scripts
      PACKAGE_FOLDER: /root/repo/Packages/Newtonsoft.Json-for-Unity.Converters
      ASSETS_FOLDER: /root/repo/Assets
      TEST_PROJECT: /root/repo
      PLATFORMS: playmode

    steps:
      # Checkout repo -> ~/repo
      - checkout-and-setup

      - run:
          name: Switch manifest.json (if avail.)
          command: |
            if [[ -f "$TEST_PROJECT/Packages/manifest_$UNITY_VERSION.json" ]]; then
              mv -v "$TEST_PROJECT/Packages/manifest_$UNITY_VERSION.json" "$TEST_PROJECT/Packages/manifest.json"
            else
              echo "No file at $TEST_PROJECT/Packages/manifest_$UNITY_VERSION.json to replace the manifest.json file with."
            fi

      - run:
          name: Set package version
          command: |
            echo "Newtonsoft.Json-for-Unity version: ${JSON_NET_4_UNITY_VERSION:=<<parameters.json-net-4-unity-version>>}"
            MANIFEST_FILE="$TEST_PROJECT/Packages/manifest.json"
            JQ_PATH='.dependencies["jillejr.newtonsoft.json-for-unity"]'
            echo "Previous version from manifest.json: $(jq "$JQ_PATH" "$MANIFEST_FILE")"
            echo "$(jq "$JQ_PATH=\"$JSON_NET_4_UNITY_VERSION\"" "$MANIFEST_FILE")" > "$MANIFEST_FILE"
            echo "New version from manifest.json: $(jq "$JQ_PATH" "$MANIFEST_FILE")"

      - restore_cache:
          keys:
            - test-unity-upm-manifest-{{ checksum "/root/repo/Packages/manifest.json" }}
            - test-unity-upm-manifest

      - restore_cache:
          keys:
            - test-unity-upm-global-{{ checksum "/unity-version.txt" }}
            - test-unity-upm-global

      - run:
          name: Setup Unity license
          command: |
            UNITY_LICENSE_CONTENT_B64="${!UNITY_LICENSE_CONTENT_B64_ENV}" $SCRIPTS/unity_login.sh

      - run:
          name: Run tests
          command: $SCRIPTS/unity_test.sh $TEST_PROJECT ~/tests/nunit

      - run:
          name: Convert NUnit to JUnit xml
          when: always
          command: $SCRIPTS/nunit2junit.sh ~/tests/nunit ~/tests/junit/

      - store_test_results:
          name: Store test results -> ~/tests/junit
          path: ~/tests/junit

      - save_cache:
          key: test-unity-upm-manifest-{{ checksum "/root/repo/Packages/manifest.json" }}
          paths:
            - /root/repo/Library/PackageCache

      - save_cache:
          key: test-unity-upm-global-{{ checksum "/unity-version.txt" }}
          paths:
            - /root/.config/unity3d/cache

  check-deploy-ready:
    working_directory: /root/repo

    docker:
      - image: applejag/newtonsoft.json-for-unity.converters.package-deploy-npm:v3

    environment:
      SCRIPTS: /root/repo/Build/Scripts
      PACKAGE_FOLDER: /root/repo/Packages/Newtonsoft.Json-for-Unity.Converters

    steps:
      - checkout-and-setup:
          setup-variables: true

      - attach_workspace:
          at: /workspace

      - run:
          name: Check if release is ready for deploy
          command: $SCRIPTS/check_deploy_ready.sh

  deploy-cloudsmith:
    working_directory: /root/repo

    docker:
      - image: applejag/newtonsoft.json-for-unity.converters.package-deploy-npm:v3

    environment:
      SCRIPTS: /root/repo/Build/Scripts
      REPO_FOLDER: /root/repo
      PACKAGE_FOLDER: /root/repo/Packages/Newtonsoft.Json-for-Unity.Converters
      NPM_REGISTRY: https://npm.cloudsmith.io/jillejr/newtonsoft-json-for-unity/

    steps:
      - checkout-and-setup:
          setup-variables: true

      - run:
          name: NPM Login
          command: |
            echo "//npm.cloudsmith.io/jillejr/newtonsoft-json-for-unity/:_authToken=$NPM_AUTH_TOKEN" >> ~/.npmrc
            echo "registry=$NPM_REGISTRY" >> ~/.npmrc
            echo "always-auth=true" >> ~/.npmrc

      - run:
          name: Deploy
          command: |
            if [ -z "$(npm view jillejr.newtonsoft.json-for-unity.converters@$VERSION_UPM versions)" ]
            then
              cp -fv \
                  $REPO_FOLDER/CHANGELOG.md \
                  $REPO_FOLDER/THIRD-PARTY-NOTICES.md \
                  $PACKAGE_FOLDER/.
              echo

              cd $PACKAGE_FOLDER
              if [ "${VERSION_AUTO_DEPLOY_LIVE_RUN:-}" == "true" ]
              then
                npm publish
              else
                echo "RUNNING NPM PUBLISH DRY-RUN"
                npm publish --dry-run
                echo "RUNNING NPM PUBLISH DRY-RUN"
              fi
            else
              echo "Package version $VERSION_UPM already existed. Skipping the publish"
            fi

  deploy-github:
    working_directory: /root/repo

    environment:
      SCRIPTS: /root/repo/Build/Scripts
      PACKAGE_FOLDER: /root/repo/Packages/Newtonsoft.Json-for-Unity.Converters
      REPO_FOLDER: /root/repo

    docker:
      - image: applejag/newtonsoft.json-for-unity.converters.package-deploy-github:v4

    steps:
      - checkout-and-setup:
          setup-variables: true

      - add_ssh_keys:
          fingerprints:
            - "4d:b2:3f:e0:17:3e:3a:bd:7d:16:5b:ca:b7:6e:fb:c0"

      - run:
          name: Git Login
          command: $SCRIPTS/git_login.sh

      - run:
          name: Deploy
          command: $SCRIPTS/deploy_git.sh

workflows:
  version: 2
  test:
    jobs:
      - test:
          filters:
            branches:
              <<: *WORKFLOW_TEST_FILTER
          matrix:
            parameters:
              unity-version: [ unity-2018-4-14f1, unity-2019-2-11f1, unity-2020-1-0b6 ]
              json-net-4-unity-version: [ 13.0.102, 12.0.302, 11.0.202, 10.0.302 ]
  check-deploy-ready:
    jobs:
      - check-deploy-ready:
          filters:
            branches:
              <<: *WORKFLOW_CHECK_DEPLOY_READY_FILTER
  test-deploy:
    jobs:
      - test:
          filters:
            branches:
              <<: *WORKFLOW_TEST_DEPLOY_FILTER
          matrix:
            parameters:
              unity-version: [ unity-2018-4-14f1, unity-2019-2-11f1, unity-2020-1-0b6 ]
              json-net-4-unity-version: [ 13.0.102, 12.0.302, 11.0.202, 10.0.302 ]
      - check-deploy-ready:
          requires:
            - test
      - deploy-cloudsmith:
          requires:
            - check-deploy-ready
      - deploy-github:
          requires:
            - check-deploy-ready
