
# top-most EditorConfig file
root = true

# === All files ===
[*]

# EditorGuidelines https://github.com/pharring/EditorGuidelines
guidelines = 80

indent_style = space
indent_size = 4

end_of_line = lf
insert_final_newline = true

# === YML & JSON config files ===
[*.{yml,yaml,json}]

indent_style = space
indent_size = 2

# === XML config files ===
[*.{xml}]

indent_style = tab
indent_size = 4

# === C# files ===
[*.cs]

guidelines = 80, 120, 121

indent_style = space
indent_size = 4

# options_name = false|true : none|silent|suggestion|warning|error

## --- Language code styles ---

### .NET code style settings

# "This." and "Me." qualifiers
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_property = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_event = false:warning

# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = never:warning
#csharp_preferred_modifier_order
#visual_basic_preferred_modifier_order
dotnet_style_readonly_field = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# Expression-level preferences
dotnet_style_object_initializer = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = false:suggestion

# Null-checking preferences
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning

## C# code style settings

# Implicit and explicit types
# Only prefer `var` when apparent
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# Expression-bodied members
csharp_style_expression_bodied_methods = false:warning
csharp_style_expression_bodied_constructors = false:warning
csharp_style_expression_bodied_operators = false:warning
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_accessors = true:warning

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning

# Inlined variable declarations
csharp_style_inlined_variable_declaration = true:suggestion

# Expression-level preferences
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:warning

# "Null" checking preferences
csharp_style_throw_expression = false:suggestion
csharp_style_conditional_delegate_call = true:warning

# Code block preferences
csharp_prefer_braces = true:suggestion

## --- Formatting conventions ---

### .NET formatting settings

# Organize usings

dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

### C# formatting settings

# Newline options
# all = accessors, anonymous_methods, anonymous_types, control_blocks, events, indexers, lambdas, local_functions, methods, object_collection_array_initializers, properties, types
csharp_new_line_before_open_brace = accessors, anonymous_methods, control_blocks, events, indexers, lambdas, local_functions, methods, properties, types
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = false
csharp_indent_labels = one_less_than_current

# Spacing options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_parentheses = none
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Wrapping options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

## --- ReSharper ---

# Var
csharp_for_built_in_types = use_explicit_type
csharp_for_simple_types = can_use_either
csharp_for_other_types = use_explicit_type
csharp_prefer_explicit_discard_declaration = true

# Modifiers
csharp_default_private_modifier = implicit
csharp_default_internal_modifier = explicit

## --- Naming conventions ---

# Kinds of symbols: namespace,class,struct,interface,enum,property,method,field,event,delegate,parameter,type_parameter,local,local_function
# Accessability of symbols: public,internal,private,protected,protected_internal,private_protected,local
# Modifiers of symbols (optional): abstract,async,const,readonly,static

# capitalization styles:
#  pascal_case = FooBar, Foo_Bar
#  camel_case = fooBar, foo_Bar
#  first_word_upper = Foobar, FooBar, Foo_bar
#  all_upper = FOOBAR, FOO_BAR
#  all_lower = foobar, foo_bar

# Rule severity: silent | suggestion | warning | error

# Common styles
dotnet_naming_style.capitalized_style.capitalization = pascal_case
dotnet_naming_style.camel_style.capitalization = camel_case
dotnet_naming_style.snake_style.capitalization = all_lower
dotnet_naming_style.snake_style.word_separator = _
dotnet_naming_style.upper_style.capitalization = all_upper
dotnet_naming_style.upper_style.word_separator = _

# Most symbols : capitalize
dotnet_naming_rule.static_symbols_must_be_capitalized.style = capitalized_style
dotnet_naming_rule.static_symbols_must_be_capitalized.symbols = capitalized_symbols
dotnet_naming_rule.static_symbols_must_be_capitalized.severity = warning

dotnet_naming_symbols.capitalized_symbols.applicable_kinds = property,namespace,class,struct,interface,enum,method,event,delegate,type_parameter,local_function
dotnet_naming_symbols.capitalized_symbols.applicable_accessibilities = *

# Fields, local variables, parameters : camel case
dotnet_naming_symbols.instance_symbols.applicable_kinds = field,local,parameter
dotnet_naming_symbols.instance_symbols.applicable_accessibilities = public,private,protected,local

dotnet_naming_rule.instance_symbols_must_be_camel_cased.style = camel_style
dotnet_naming_rule.instance_symbols_must_be_camel_cased.symbols = instance_symbols
dotnet_naming_rule.instance_symbols_must_be_camel_cased.severity = warning

# Non-public fields : camel case with prefix
dotnet_naming_symbols.non_public_fields.applicable_kinds = field
dotnet_naming_symbols.non_public_fields.applicable_accessibilities = private,protected,protected_internal,internal,private_protected

dotnet_naming_style.non_public_fields_style.capitalization = camel_case
dotnet_naming_style.non_public_fields_style.required_prefix = _

dotnet_naming_rule.non_public_fields_must_be_camel_with_prefix.style = non_public_fields_style
dotnet_naming_rule.non_public_fields_must_be_camel_with_prefix.symbols = non_public_fields
dotnet_naming_rule.non_public_fields_must_be_camel_with_prefix.severity = warning

# Constants : UPPER_CASE
dotnet_naming_symbols.constant_symbols.applicable_kinds = property,field
dotnet_naming_symbols.constant_symbols.applicable_accessibilities = *
dotnet_naming_symbols.constant_symbols.required_modifiers = const

dotnet_naming_rule.constants_must_be_uppercase.style = upper_style
dotnet_naming_rule.constants_must_be_uppercase.symbols = constant_symbols
dotnet_naming_rule.constants_must_be_uppercase.severity = warning

# static readonly : UPPER_CASE
dotnet_naming_symbols.static_readonly_symbols.applicable_kinds = property,field
dotnet_naming_symbols.static_readonly_symbols.applicable_accessibilities = *
dotnet_naming_symbols.static_readonly_symbols.required_modifiers = static,readonly

dotnet_naming_rule.private_static_readonly_must_be_uppercase.style = upper_style
dotnet_naming_rule.private_static_readonly_must_be_uppercase.symbols = static_readonly_symbols
dotnet_naming_rule.private_static_readonly_must_be_uppercase.severity = warning
